# name: Ruian Duan
# date: 12/02/2014

1. what's the problem?
Repackaged app are one of the major sources of mobile malware and also an
important cause of severe revenue loss to app developers.

Current repackage detection are vulnerable to code obfuscation and cannot scale.
They mainly focus on code similarity, ignoring the dependence of code on the
resources.

Detect repackaged android applications at scale using a resource driven
approach.

2. why should we care?
Attackers could use simple app hardening techniques to evade current code
analysis. (True?)

3. what's the key idea to solve this problem?
Extract features from resources and use them to detect app repackaging.
statistical features include: 
(1) number of activities (2) num of permissions (3) num of intent filters (4) average
number of png files per dir (5) average number of .xml files in res
structural features include:
(1) activity layout (2) event handler

4. how can we believe their solution?
They didn't compare with other methods the precision, or recall. Why?
They just use simple accuracy to show that their approach works.
Apps that are automatically generated will cause false positive.
Dedicated attacker could evade detection by adding junk resources.

5. anything surprising?
Apps can be hardened by online tools. The idea of using ptrace to dump class.dex
is interesting.

6. what can we get from their approach?
They used several tools that I want to use as well.
	apktool fails some time, so that use aapt and baksmali to obtain resources and
	smali code separately.

	They use A3E to construct ATG for similarity comparison.
	Activity Transition Graph
	http://www.cs.ucr.edu/~neamtiu/pubs/oopsla13azim.pdf

	First get package dependency graph, then rank them with Page rank to get core
	packages and resources.

	layouts can be defined statically (res/layout) or dynamically (use GATOR)
	http://web.cse.ohio-state.edu/presto/software/gator/

